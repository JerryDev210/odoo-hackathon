generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  fullName  String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]
  cartItems CartItem[]
  orders   Order[]

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  
  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  quantity    Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Product Details for Pre-owned Items
  condition              String   // "new", "like-new", "good", "fair", "poor"
  yearOfManufacture     Int?
  brand                 String?
  model                 String?
  material              String?
  color                 String?
  originalPackaging     Boolean  @default(false)
  manualIncluded        Boolean  @default(false)
  workingConditionDesc  String?
  
  // Dimensions
  length                Float?   // in cm
  width                 Float?   // in cm
  height                Float?   // in cm
  weight                Float?   // in kg

  // Multiple Images Support
  images                String[] // Array of image URLs

  // Foreign Keys
  userId     Int
  categoryId Int

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category   @relation(fields: [categoryId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int @default(1)

  // Foreign Keys
  userId    Int
  productId Int

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id          Int      @id @default(autoincrement())
  totalAmount Float
  status      String   @default("completed")
  createdAt   DateTime @default(now())

  // Foreign Keys
  userId Int

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float

  // Foreign Keys
  orderId   Int
  productId Int

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
